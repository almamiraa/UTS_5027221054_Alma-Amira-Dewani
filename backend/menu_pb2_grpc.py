# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import menu_pb2 as menu__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in menu_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class OrderServiceStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddOrder = channel.unary_unary(
                '/OrderService/AddOrder',
                request_serializer=menu__pb2.Order.SerializeToString,
                response_deserializer=menu__pb2.Order.FromString,
                _registered_method=True)
        self.GetAllOrders = channel.unary_unary(
                '/OrderService/GetAllOrders',
                request_serializer=menu__pb2.Empty.SerializeToString,
                response_deserializer=menu__pb2.OrderList.FromString,
                _registered_method=True)
        self.GetOrder = channel.unary_unary(
                '/OrderService/GetOrder',
                request_serializer=menu__pb2.OrderId.SerializeToString,
                response_deserializer=menu__pb2.Order.FromString,
                _registered_method=True)
        self.UpdateOrder = channel.unary_unary(
                '/OrderService/UpdateOrder',
                request_serializer=menu__pb2.Order.SerializeToString,
                response_deserializer=menu__pb2.Order.FromString,
                _registered_method=True)
        self.DeleteOrder = channel.unary_unary(
                '/OrderService/DeleteOrder',
                request_serializer=menu__pb2.OrderId.SerializeToString,
                response_deserializer=menu__pb2.Empty.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """Service
    """

    def AddOrder(self, request, context):
        """Menambah pesanan
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllOrders(self, request, context):
        """Membaca semua pesanan
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Membaca pesanan berdasarkan ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrder(self, request, context):
        """Memperbarui pesanan
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOrder(self, request, context):
        """Menghapus pesanan berdasarkan ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.AddOrder,
                    request_deserializer=menu__pb2.Order.FromString,
                    response_serializer=menu__pb2.Order.SerializeToString,
            ),
            'GetAllOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllOrders,
                    request_deserializer=menu__pb2.Empty.FromString,
                    response_serializer=menu__pb2.OrderList.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=menu__pb2.OrderId.FromString,
                    response_serializer=menu__pb2.Order.SerializeToString,
            ),
            'UpdateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrder,
                    request_deserializer=menu__pb2.Order.FromString,
                    response_serializer=menu__pb2.Order.SerializeToString,
            ),
            'DeleteOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOrder,
                    request_deserializer=menu__pb2.OrderId.FromString,
                    response_serializer=menu__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Service
    """

    @staticmethod
    def AddOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrderService/AddOrder',
            menu__pb2.Order.SerializeToString,
            menu__pb2.Order.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrderService/GetAllOrders',
            menu__pb2.Empty.SerializeToString,
            menu__pb2.OrderList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrderService/GetOrder',
            menu__pb2.OrderId.SerializeToString,
            menu__pb2.Order.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrderService/UpdateOrder',
            menu__pb2.Order.SerializeToString,
            menu__pb2.Order.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrderService/DeleteOrder',
            menu__pb2.OrderId.SerializeToString,
            menu__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
